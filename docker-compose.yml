services:
  postgres:
    image: postgres:15-alpine
    container_name: newsroom-postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      POSTGRES_DB: ${DB_DATABASE:-newsroom}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/init:/docker-entrypoint-initdb.d
    networks:
      - newsroom-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: newsroom-backend
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT:-5432}
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_DATABASE=${DB_DATABASE:-newsroom}
      - API_PORT=${API_PORT:-3001}
    ports:
      - "${API_PORT:-3001}:3001"
    depends_on:
      - postgres
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads
    networks:
      - newsroom-network
    command: npm run start:dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: newsroom-frontend
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3001/api/v1}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-NewsRoom}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      - API_URL=http://localhost:3001/api/v1

    ports:
      - "${WEB_PORT:-3000}:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - newsroom-network
    command: npm run dev

volumes:
  postgres_data:

networks:
  newsroom-network:
    driver: bridge
